Constructor
===========
Q1: purpose of constructor?
-->main purposeof constructor to perform initilization of an " Object ".
1: onces we create an object compulsory we need to "perform initilization for that object".
2: otherwise the object is not response properly .[s1 = {name : null , rollNum : 0 }, s2 = {name : null , rollNum : 0 }, s3 = {name : null , rollNum : 0 } ..... ] .
		
Q2: how to create a constructor?
--> syntax
	access_modifier class_name(list of argument)
	{ 
	...
	}
	
--> example :
	Student(String name , int rollno)
	{
		this.name = name; // current object name 
		this.rollno = rollno;
	}
	
Q3 : explain that line Student s = new Student("Tanveer",101);?
--> we are creating an object using " new keyword".
--> when we create an object a seperate copy of instance variable will be created.
--> jvm will provide default value for instance variable .[ name : null , rollno : 0].
--> we are initilizing an object using constructor "Student()".[name : "Tanveer", rollno : 101 ]
--> s1 is a reference variable the object is assign.

Q4: write an simple program for a constructor?
--> 
	Example :
	
	public class Student {
	
    private String name;
    private Integer rollNo;

    Student(String name, Integer rollNo)
    {
        this.name = name;
        this.rollNo = rollNo;
    }

    public static void main(String[] args) {
        Student s = new Student("Tanveer",101);
        Student s1 = new Student("Anik",102);
        System.out.println(s); // when you print an object it will return hashcode
        System.out.println("Name:"+s.name+"   "+"Roll:"+s.rollNo);
        System.out.println("Name:"+s1.name+"   "+"Roll:"+s1.rollNo);

    }
}

Q5: when the constructor will execute?
--> after creating an Object constructor will execute automatically.

Q6: when the method will execute?
--> when we call the method that time method will be execute.

Q7: how many time constructor will execute?
--> for " every object "  constructor will be execute seperately.
	
	example :
			class Test
			{
				Test()
					{
						sout("constructor will execute...");
					}
				psvmI(String[] args)
					{
						Test t1 = new Test();
						Test t1 = new Test();
						Test t1 = new Test();
						Test t1 = new Test();
						Test t1 = new Test();
					}
			}
			
	--> they are total 5 time constructor will be execute
	O/p : constructor will execute...
		  constructor will execute...
		  constructor will execute...
		  constructor will execute...
		  constructor will execute...
		  
Q8 : list the various rules of constructor?
-->
1 : constructor name should be same as " class name ".
2 : constructor does not have " return type ".
3 : the modifier applicable for a constructor are [ public , default , protected , private ] allowed.
4 : constructor cannot be abstract, static, final, and synchronized

Q9 : when we used return type with constructor what happend?
--> compiler is treated as method but not a constructor.

Q10 : can we decleared a class name as a method in java?
--> yes we can decleared a class name as a method in java.
--> it is not recomanded it not good programming practice.

Q11 : access modifier applicable for constructor?
--> they are 4 access_modifier applicable for constructor.
1 : public  	: we can create an object any where within the package and outside a package.
2 : default 	: we can create an object only within the current / same package.
4 : private		: we can create an object only within the class only.

Q12: what is mean by singleton class?
--> we can create  " only one object " for that class such type of class is called as singleton class. 
--> we can used private modifier with the constructor in singleton class.
						
Q13 : when private constructor are helpfull?
--> when we are creating a " singleton class " that time private constructor are helpfull.

Q14 : types of constructor in java?
--> they are three types
	1 : Default constructor
	2 : Parameterized  constructor
	
Q15: Every class can contain a constructor or not?
--> yes every class can contain a constructor.

Q16 : abstract class can contain a constructor or not?
--> yes abstract class also contain a constructor.

Q17 : who uis responsible to generate a default constructor?
--> " compiler " is responsible for generating a default constructor.
	example :
			class Test
			{
				.......
			}
			
			
		 javac Test.java
		 
			class Test
			{
				Test()
				{
					super();
				}
			}

Q18 : when compiler will create default constructor?
--> if we are not creating any constructor that time compiler will create default constructor.

Q19 : compiler generate default constructor every time?
--> No if class not contain any constructor that time only compiler will generate default constructor.

Q20 : in the same class both default and customized constructor are availabe simulteniouley?
--> the class contain either default constructor or customized constructor.

Q19 : what is mean by default constructor?
--> If you are not creating any constructor then compiler will provide " default constructor " at the time of compilation.
--> default constructor will be created by " compiler ".
--> default constructor is always " no-args constructor ". 
--> every class in java including abstract class also contain constructor.

Q20 : every no-args constructor is a default constructor?
--> every no-args constructor is a  "not" a  default constructor

Q21 : what is a protype / rules of default constructor?
1 : default constructor is always no-args constructor.
2 :  the access modifier of default constructor is same as class modifier.[this rule is applicable for public , default ]
3 :  default constructor contain only one line [i.e super(); ]

Q22:  which modifier is applicable for class level?
---> public and default modifier are applicable for the class level.

Q23 : case study on default constructor?
--->
-----------------------------------------------------------------
programer code 								compiler code
------------------------------------------------------------------
1 : class Test							1 : class Test
	{										{
		...										Test()
	}											{
													super();
												}
											}
--------------------------------------------------------------------
											
2 : public class Test					1 : public class Test
	{										{
		...										public Test()
	}											{
													super();
												}
											}
-------------------------------------------------------------------
3 : class Test							3 : class Test
	{										{
		public void								Test()
		{										{
			...										super();
		}										}
	
	}											public void								
												{
													...
												}
											}
---------------------------------------------------------------------
	
4 : class Test							4 : class Test
	{										{
		Test()									Test()
		{										{
		}											super();
	}											}
											}
	
------------------------------------------------------------------
5 : class Test							5 : class Test
	{										{
		Test(int i)								Test(int i)
		{										{
			this();									this();
	    }									     }
		Test()								    Test()
		{										{
												   super();
	    }									     }	

-------------------------------------------------------------------		
6 :	class Test							6 : class Test						
	{										{
		Test(int i)								Test(int i)
		{										{
			super();							 	super();
	    }									     }
	}							            }
	
---------------------------------------------------------------------

Q24 : which is the first line always present in the constructor?
---> first line always present into the every constructor should be " either super or this ".
---> if you are not writing anything into the constructor the compiler is always place a " super" .

Q28 : where we can used super() and this() in consructor?
--> we can use only "inside the consructor".
--> we should use only in "first line".
--> we can use "only one" but not both simulteniouley.

Q25: when we use super() and this() case study?
-->
1 : you can used super() or this() at a first line of a constructor.
1 : you can used either " super() or this()" at first line but can not both simulteniouley. 
3 : we can not used super() and this() inside the method]

case 1: Invalid
-------
		class Test
		{
			Test()
			{
				sout("consructor..");
				super();
			}
		}
CE : call to super must be first statement in constructor.

case 2 : Invalid [ you can used either " super() or this()" at first line but can not both simulteniouley. 
--------
		class Test
		{
			Test()
			{
				super();
				this();
				sout("consructor..");
			}
		}
CE : call to this must be first statement in constructor.

case 3 : Invalid [ we can not used super() and this() inside the method]
-------
		class Test
		{
			public void show()
			{
				super();
				sout("consructor..");
			}
		}
CE : call to super must be first statement in consructor.

Q26 : what is purpose of super() in the consructor?
--> by using super() we can call the 'super class constructor' .

Q27 : what is purpose of this() in the consructor?
--> by using this() we can call the 'current class constructor'. 

Q29 : what is used of super and this keyword ?
--> this keyword  : by using " this keyword " we can access current class instance variable or current class object ".
--> super keyword : by using " super keyword " we can access parent class instance variable or parent class object

	example :
			Class Parent
			{
				public String s = "parent variable";
			}
			
			class Child
			{
				public String s = "child variable";
				
				public void show()
				{
					sout(s); //child variable
					sout(this.s); // child variable
					sout(super.s); // parent variable
				}
			}
			class Test
			{	
				psvm(String[] args)
				{
					Child c = new Child();
					c.show();
				}
			}
			
--> it is required when Parent and child class contain " variable and method name should be same ".

Q30 : where we can  used this and super keyword?
--> we can used "this and super" any where but can not used inside a " static area ".

Q31 : where we can not used this and super keyword?
--> we can not used "this and super" inside a " static area ".

Q32 : what is difference b/w constructor call [ super() , this () ] and keyword call [ super , this]?
-->
1 : Super() and this() :
------------------------
	1 : super() and this() are "consructor call".
	2 : super() and this() are used to call "super class and current class " consructor.
	3 : super() and this() are used in the " consructor as a first line".
	4 : super() and this() we can used  " only one " , but can not be used similtaneously.
	
2 :	Super and this :
------------------------
	1 : Super and this are "keywords".
	2 : super and this are used to access the " super class and current class " instance members.
	3 : super and this are used in " anywhere " except " static area ".
	4 : super and this we can used  "any number of times".

Q34 : overLoading concept is applicable for constructor?
--> yes overLoading concept is applicable for a constructor
	
Q35 : what is mean by constructor overloading?
--> two or more constructor have same name but difference in the signature with in the same class is called as constructor overloading.
	
	example : 
	public class OverLoading {

    private String name;
    private Integer age;
    private Long mob;
    private String address;
    private String email;

    OverLoading(String name)
    {
        System.out.println(" name :"+ name);
    }

    OverLoading(String name , Integer age)
    {
        System.out.println("name :"+ name + "  "+ "age "+ age);
    }

    OverLoading(String name , Integer age, String address)
    {
        System.out.println("name :"+ name + "  "+ "age "+ age+ " "+ "address :"+ address);
    }

    public static void main(String[] args) {
        OverLoading overLoading = new OverLoading("Tanveer");
        OverLoading overLoading1 = new OverLoading("Anik",26);
        OverLoading overLoading2 = new OverLoading("Asif",25,"Karoshi");
    }
}

					OR
					
					
	public class OverLoading {

    private String name;
    private Integer age;
    private Long mob;
    private String address;
    private String email;

    OverLoading(String name)
    {
        System.out.println(" name :"+ name);
    }

    OverLoading(String name , Integer age)
    {
        this("Tanveer");
        System.out.println("name :"+ name + "  "+ "age "+ age);
    }

    OverLoading(String name , Integer age, String address)
    {
        this("Anik",29);
        System.out.println("name :"+ name + "  "+ "age "+ age+ " "+ "address :"+ address);
    }

    public static void main(String[] args) {
        OverLoading overLoading2 = new OverLoading("Asif",25,"Karoshi");
    }
}

O/p :

name :Tanveer
name :Anik  age 29
name :Asif  age 25 address :Karoshi

Q36 : how to call one constructor from another constructor?
---> by using " this keyword " we can call the constructor
	example :
	public class CallingConstructor {
    CallingConstructor(Double d)
    {
        this(10); // calling Integer args constructor
        System.out.println("Double args constructor will be execute");
    }
    CallingConstructor(Integer i)
    {
        this(); // calling No args constructor
        System.out.println("Integer args constructor will be execute");
    }
    CallingConstructor()
    {
        System.out.println("NO args constructor will be execute");
    }

    public static void main(String[] args) {
        CallingConstructor c = new CallingConstructor(12.89);
        CallingConstructor c1 = new CallingConstructor(12);
        CallingConstructor c2 = new CallingConstructor();

    }
}

O/p : 
NO args constructor will be execute
Integer args constructor will be execute
Double args constructor will be execute

NO args constructor will be execute
Integer args constructor will be execute

NO args constructor will be execute

Q37 : overriding or inheritance concept is applicable for a constructor ?
--> overriding or inheritance concept is not applicable for a constructor
--> pro example:
	class A
	{
		A()
		{
			sout("no args constructor");
		}
	}
	class B extens A
	{
		B(int i)
		{
			sout("Integer args constructor");
		}
		
		psvm(String[] args)
		{
			B b = new B(); //CE : no args constructor is not availabe
		}
	}
		
Q38 : Interface can have consructor and reason?
--> Interface does not hava constructor.
--> constructor is used to initilization of instance varaiable
--> In Interface every varaiable is " public static final".

Q39: where we can used consructor and where we can not?
--> where we can used consructor
	1: class
	2: Abstract class
	
--> where we can not used 
	1: Interface
	
Q40 : Recursive Method and constructor call?
--> it will always through RE and CE.
case 1 :
-------
public class RecursiveMethod {
    public static  void  m1()
    {
        System.out.println("m1() is calling");
        m2();

    }

    public static  void  m2()
    {
        System.out.println("m2() is calling");
        m1();
    }

    public static void main(String[] args) {
        System.out.println("main() method is calling");
    }
}

O/p : main() method is calling

case 2 : Recursive method call 
------------------------------
public class RecursiveMethod {
    public static  void  m1()
    {
        System.out.println("m1() is calling");
        m2();

    }

    public static  void  m2()
    {
        System.out.println("m2() is calling");
        m1();
    }

    public static void main(String[] args) {
        System.out.println("main() method is calling");
		m1();
    }
}

case 3 : Recursive constructor call
--------
public class RecursiveConstructor {
    RecursiveConstructor()
    {
        this("xyz");
        System.out.println("No args constructor...");
    }

    RecursiveConstructor(String name)
    {
        this();
        System.out.println("String args constructor...");
    }

    public static void main(String[] args) {
        System.out.println("main() calling...");
    }
}

CE : Recursive consructor invocation

Q40 : Recursive method call is through which error?
--> Recursive method call always through RE[ runtime Exception] : stack overFlow error.

Q41 : Recursive constructor call is through which error?
--> Recursive consructor call always through CE[ compile Exception] :Recursive consructor invocation.


Q42 : how to call parent and child class consructor using super() ?
--> which are valid from belowe  give code

case 1 : we are not creating a consructor
--------
	class A
	{
	
	}
	class B extends A 
	{
	
	}

valid : 
-------
--> compiler will create default consructor for both the classes
--> default constructor have " super() ". 
--> child class check the no-args constructor is present in the parent class or not.
--> no-args constructor is present in parent class that why it is valid
	
case 2 : we create no args consructor with and we can not add code inthis constructor
--------
	class A
	{
		A()
		{
		}
	}
	class B extends A 
	{
	
	}
	
valid : 
-------
--> compiler will create default consructor for child class
--> default constructor have " super() ".
--> child class check the no-args constructor is present in the parent class or not.
--> no-args constructor is present in parent class that why it is valid

	
case 3 :
--------
	class A
	{
		A(int i)
		{
		}
	}
	class B extends A 
	{
	
	}
invalid
-------
--> compiler will create default consructor for child class.
--> default constructor have " super() ".
--> child class check the no-args constructor is present in the parent class or not.
--> no-args constructor is not present in parent class that why it is Invalid


Q43 : how to make belowe code is valid?
	class A
	{
		A(int i)
		{
		}
	}
	class B extends A 
	{
	
	}
--> we can solve that issue by 2 way 	

1 :
--> NOte : if parent class have argument constructor then make sure in your child class consructor " corresponding consructor call is availabe or not ".
 
	class A
	{
		A(int i)
		{
		}
	}
	class B extends A 
	{
		A()
		{
			super(10);
		}
	}
	
2 : 
-->  if your parent class have argument consructor then It is  " highly recomanded no-args consructor in a parent class".
--> beacuse of that always matched constructor is availabe.
class A
	{
		A(int i)
		{
		}
		
		A()
		{
		}
	}
	class B extends A 
	{
		
	}
	
Q44 : If you parent class have arg have args constructor and child class extends parent class what issue we face and how to solve that issue?
---> we face consructor not matched issue
---> we can solve that issue using two way
	1: corresponding consructor call should be present in the child class. [ super(10);]
	2: best way create no-args consructor into the child class.
	
Q45 : throws clause with constructors?
--> If parent class consructor through any " check exception " then compulsory the child class consructor should  "throws" same exception or its parent .
--> otherwise the code will not compile : CE

example :

class A
	{
		A() throws IOException
		{
		}
		
	}
	class B extends A 
	{
		B() throws IOException
		{
			super();
		} 
	}

Q46 : how to handle a exception?
--> we are handle a exception using two way
	1 : try and catch
	2 : using throws keyword
	
Q47 : can we handle constructor based exception using try and catch?
--> No we can not used try and catch on consructor
--> becuse " super() " is a first line in the constructor .

class A
	{
		A() throws IOException
		{
		}
		
	}
	class B extends A 
	{
		B() 
		{
			try
			{
				super();
		    } 
			catch(IOException e)
			{
			}
		}
	}
	
CE : Super() must be present at first line
			
	